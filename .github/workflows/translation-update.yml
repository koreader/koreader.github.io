name: Update translations (POT/PO/HTML)

on:
  push:
    branches: [ master ]
    paths:
      - 'user_guide/en.html'
      - 'i18n/**/*.po'

  # Allow manual triggering
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-translations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install translate-toolkit and gettext
        run: |
          sudo apt-get update
          sudo apt-get install -y translate-toolkit gettext

      - name: Create translations directory if it doesn't exist
        run: mkdir -p i18n/po

      - name: Extract translatable strings from HTML
        run: |
          # Extract translations from HTML source file using html2po
          html2po -i user_guide/en.html -o i18n/user_guide.pot

          # Check if user_guide.pot exists
          if [ ! -f i18n/user_guide.pot ]; then
            echo "Error: Failed to create POT file"
            exit 1
          fi

      # - name: Update or create language PO files
      #   run: |
      #     # Find all existing PO files and update them with msgmerge
      #     for po_file in i18n/po/*.po; do
      #       echo "Updating $po_file"
      #       msgmerge --update --backup=off "$po_file" i18n/user_guide.pot
      #     done

      - name: Generate translated HTML files
        run: |
          # Process each PO file and generate translated HTML
          for po_file in i18n/po/*.po; do
            # Extract language code from filename
            lang=$(basename "$po_file" .po)
            html_file="user_guide/$lang.html"

            echo "Generating HTML for $lang"
            po2html -t user_guide/en.html -i "$po_file" -o "$html_file"
          done

      - name: Add translated images to HTML
        run: |
          # Find all <img ... src=...> in user guide html, then for each language check if a localized image exists in user_guide/pictures/<lang>/ and, if so, replace the src in the translated HTML.
          for po_file in i18n/po/*.po; do
            lang=$(basename "$po_file" .po)
            html_file="user_guide/$lang.html"

            if [ -f "$html_file" ]; then
              while read -r img_path; do
                img_file=$(basename "$img_path")

                fs_localized_path="user_guide/pictures/$lang/$img_file"
                html_localized_path="pictures/$lang/$img_file"

                if [ -f "$fs_localized_path" ]; then
                  # Escape search (regex) and replacement for sed, using | as delimiter
                  escaped_search=$(printf '%s' "$img_path" | sed -e 's/[\/&|.^$*+?()[\]{}\\]/\\&/g')
                  escaped_replacement=$(printf '%s' "$html_localized_path" | sed -e 's/[\/&|\\]/\\&/g')
                  sed -i "s|$escaped_search|$escaped_replacement|g" "$html_file"
                  echo "[$lang] Replaced: $img_path -> $html_localized_path"
                fi
              done < <(
                perl -ne 'while (/<img[^>]*\bsrc\s*=\s*(["\047])([^"\047]+)\1/gi){ print "$2\n" }' user_guide/en.html \
                  | sort -u \
                  | grep -E '^pictures/'
              )
            fi
          done

      - name: Commit changes back to repository
        run: |
          git add i18n/user_guide.pot i18n/po/*.po user_guide/*.html

          # Ignore commits where only POT/PO timestamp headers changed
          if git diff --staged -I '^"POT-Creation-Date:' -I '^"PO-Revision-Date:' --quiet; then
            echo "No substantive translation changes to commit"
            exit 0
          fi

          if git diff --staged --quiet; then
            echo "No translation changes to commit"
            exit 0
          fi

          git commit -m "Update translations with html2po/po2html [automated]"
          git push
